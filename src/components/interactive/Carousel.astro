---
import settings from "../../data/home.json"
const { videoCarousel = settings.videoCarousel } = Astro.props
---

<div class="relative js-carousel w-full aspect-[4/5] overflow-hidden flex items-center">
	<!-- Video List -->
	<ul class="carousel__list flex w-full h-full transition-transform js-carousel__list">
		{
			videoCarousel.map((item) => (
				<li class="carousel__item w-full h-full flex-shrink-0">
					<video autoplay muted loop playsinline class="w-full h-full object-cover rounded-xl" src={`/media/videoGallery/${item.src}.${item.type}`} />
				</li>
			))
		}
	</ul>

	<!-- Pagination Dots -->
	<div class="absolute bottom-4 left-1/2 transform -translate-x-1/2 flex gap-2 z-10 js-carousel__pagination"></div>
</div>

<style>
	.carousel__list {
		will-change: transform;
	}
	.carousel__item {
		width: 100%;
		height: 100%;
		flex-shrink: 0;
		display: flex;
		justify-content: center;
		align-items: center;
	}
	.carousel__list--animating {
		transition: transform 0.5s cubic-bezier(0.215, 0.61, 0.355, 1);
	}
	.carousel__item video {
		width: 100%;
		height: 100%;
		object-fit: cover;
	}
	.carousel__dot {
		width: 10px;
		height: 10px;
		border-radius: 9999px;
		background-color: rgba(255, 255, 255, 0.3);
		transition:
			background-color 0.3s,
			transform 0.3s;
		transform: scale(1);
	}
	.carousel__dot--active {
		background-color: white;
		transform: scale(1.25);
	}
</style>

<script>
	document.addEventListener("DOMContentLoaded", () => {
		const carouselEl = document.querySelector(".js-carousel") as HTMLElement | null
		const list = carouselEl?.querySelector(".js-carousel__list") as HTMLElement | null
		const items = list?.children ?? []
		const pagination = carouselEl?.querySelector(".js-carousel__pagination") as HTMLElement | null

		if (!carouselEl || !list || items.length === 0 || !pagination) return

		let index = 0
		let autoplayInterval: ReturnType<typeof setInterval> | null = null

		// Pagination Dots
		const dots: HTMLButtonElement[] = Array.from(items).map((_, i) => {
			const dot = document.createElement("button")
			dot.className = "carousel__dot"
			dot.addEventListener("click", () => {
				index = i
				update()
				resetAutoplay()
			})
			pagination.appendChild(dot)
			return dot
		})

		const updateDots = () => {
			dots.forEach((dot, i) => {
				dot.classList.toggle("carousel__dot--active", i === index)
			})
		}

		const update = () => {
			const offset = -index * list.clientWidth
			;(list as HTMLElement).style.transform = `translateX(${offset}px)`
			list.classList.add("carousel__list--animating")

			list.addEventListener("transitionend", () => list.classList.remove("carousel__list--animating"), { once: true })

			updateDots()
		}

		const next = () => {
			index = (index + 1) % items.length
			update()
		}

		const startAutoplay = () => {
			stopAutoplay()
			autoplayInterval = setInterval(next, 5000)
		}

		const stopAutoplay = () => {
			if (autoplayInterval !== null) {
				clearInterval(autoplayInterval)
				autoplayInterval = null
			}
		}

		const resetAutoplay = () => {
			stopAutoplay()
			startAutoplay()
		}

		// Touch swipe
		let startX = 0
		list.addEventListener("touchstart", (e) => {
			const event = e as TouchEvent
			startX = event.touches[0].clientX
		})
		list.addEventListener("touchend", (e) => {
			const event = e as TouchEvent
			const endX = event.changedTouches[0].clientX
			if (startX - endX > 50) {
				next()
				resetAutoplay()
			} else if (endX - startX > 50) {
				index = (index - 1 + items.length) % items.length
				update()
				resetAutoplay()
			}
		})

		update()
		startAutoplay()
	})
</script>
